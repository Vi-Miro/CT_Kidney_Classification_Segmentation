import sys
import json
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QFileDialog, QTextEdit,
    QVBoxLayout, QMessageBox, QComboBox, QGroupBox, QHBoxLayout
)
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt
import pydicom
import numpy as np
import cv2
from classify_image import classify_dicom, set_model, get_current_model_info
from confluent_kafka import Producer, KafkaException, Consumer
import json
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # –û—Ç–∫–ª—é—á–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π TensorFlow
import absl.logging
absl.logging.set_verbosity(absl.logging.ERROR)
from kidney_detector import KidneyDetector
import base64
from datetime import datetime


class KafkaManager:
    def __init__(self, bootstrap_servers='localhost:9092'):
        self.bootstrap_servers = bootstrap_servers
        self.producer_config = {
            'bootstrap.servers': bootstrap_servers,
            'message.max.bytes': 20971520,
            'queue.buffering.max.messages': 100000,
            'queue.buffering.max.kbytes': 102400,
            'batch.num.messages': 1000,
            'message.timeout.ms': 5000,
            'enable.idempotence': True
        }

    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º confluent-kafka"""
        try:
            consumer = Consumer({
                'bootstrap.servers': self.bootstrap_servers,
                'group.id': 'test-connection-group',
                'auto.offset.reset': 'earliest'
            })
            topics = consumer.list_topics().topics
            print(f"Available topics: {list(topics.keys())}")
            consumer.close()
            return True
        except Exception as e:
            print(f"Kafka connection error: {str(e)}")
            return False

    def delivery_report(self, err, msg):
        """Callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫"""
        if err is not None:
            print(f'\nMessage delivery failed: {err}\n')
        else:
            print(f'\nMessage delivered to:')
            print(f'  Topic:    {msg.topic()}')
            print(f'  Partition: {msg.partition()}')
            print(f'  Offset:    {msg.offset()}\n')

    def send_message(self, data, topic="TestTopic"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka"""
        producer = Producer(self.producer_config)
        message = json.dumps(data, ensure_ascii=False)

        try:
            producer.produce(
                topic,
                value=message.encode('utf-8'),
                callback=self.delivery_report
            )
            producer.flush(timeout=5)
            return True, "Message sent successfully"
        except KafkaException as e:
            return False, f"Kafka error: {str(e)}"
        except Exception as e:
            return False, f"General error: {str(e)}"
            
    def send_dicom_file(self, dicom_path, result_data, topic="DICOMFiles"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ DICOM —Ñ–∞–π–ª–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Kafka"""
        try:
            # –ß–∏—Ç–∞–µ–º DICOM —Ñ–∞–π–ª –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(dicom_path, 'rb') as f:
                dicom_bytes = f.read()
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ JSON
            dicom_base64 = base64.b64encode(dicom_bytes).decode('utf-8')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ —Ñ–∞–π–ª–æ–º
            message = {
                'metadata': result_data,
                'dicom_file': dicom_base64,
                'filename': os.path.basename(dicom_path)
            }
            
            producer = Producer(self.producer_config)

            print("–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            producer.produce(
                topic,
                value=json.dumps(message).encode('utf-8'),
                callback=self.delivery_report
            )
            print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka...")
            producer.flush(timeout=10)
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞.")
            return True, "DICOM file sent successfully"
            
        except Exception as e:
            return False, f"Error sending DICOM file: {str(e)}"

def get_dicom_tags(dicom_file):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ DICOM —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
    tags = {}
    try:
        ds = pydicom.dcmread(dicom_file)
        ds.decode()

        def safe_str(value):
            try:
                return str(value)
            except:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        tags['PatientName'] = str(getattr(ds, 'PatientName', ''))
        tags['PatientID'] = str(getattr(ds, 'PatientID', ''))
        tags['PatientBirthDate'] = str(getattr(ds, 'PatientBirthDate', ''))
        tags['PatientSex'] = str(getattr(ds, 'PatientSex', ''))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
        tags['StudyDate'] = str(getattr(ds, 'StudyDate', ''))
        tags['StudyDescription'] = str(getattr(ds, 'StudyDescription', ''))
        tags['Modality'] = str(getattr(ds, 'Modality', ''))
        tags['BodyPartExamined'] = str(getattr(ds, 'BodyPartExamined', ''))
        
        # –¢–µ–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tags['Rows'] = str(getattr(ds, 'Rows', ''))
        tags['Columns'] = str(getattr(ds, 'Columns', ''))
        tags['PixelSpacing'] = str(getattr(ds, 'PixelSpacing', ''))
        tags['BitsAllocated'] = str(getattr(ds, 'BitsAllocated', ''))

        if hasattr(ds, 'Prediction'):
            tags['prediction'] = str(ds.Prediction)
            tags['confidence'] = str(ds.Confidence)
            tags['probabilities'] = str(ds.Probabilities)
        else:
            tags['prediction'] = "–∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
            tags['confidence'] = "–∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
            tags['probabilities'] = "–∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
        
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
        tags = {k: str(v) for k, v in tags.items()}
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ DICOM —Ç–µ–≥–æ–≤: {str(e)}")
        tags['error'] = str(e)
    
    return tags


def add_classification_result_to_dicom(dicom_path, result, output_path=None):
    try:
        ds = pydicom.dcmread(dicom_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ç–µ–≥–∏
        ds.add_new(0x00231010, 'LO', result.get('prediction', ''))  # Prediction
        ds.add_new(0x00231011, 'DS', str(result.get('confidence', 0.0)))  # Confidence –∫–∞–∫ Decimal String
        ds.add_new(0x00231012, 'LT', str(result.get('probabilities', {})))  # Long Text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = result.get('model_info', {})
        ds.add_new(0x00231020, 'LO', model_info.get('model_name', ''))
        ds.add_new(0x00231021, 'LO', model_info.get('model_path', ''))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        save_path = output_path if output_path else dicom_path
        ds.save_as(save_path)
        return save_path
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DICOM: {str(e)}")
        return None


class KidneyApp(QWidget):
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ç–æ–ª–æ–≥–∏–π –ø–æ—á–µ–∫')
        self.resize(850, 800)

        self.setStyleSheet("""
            QWidget {
                background-color: #2f2f2f;
                color: #f0f0f0;
                font-family: Segoe UI;
                font-size: 14px;
            }
            QLabel#ImageLabel {
                border: 2px dashed #555;
                background-color: #3b3b3b;
                color: #888;
                min-height: 300px;
                padding: 10px;
                qproperty-alignment: AlignCenter;
                font-size: 16px;
            }
            QPushButton {
                background-color: #4a90e2;
                color: white;
                border-radius: 8px;
                padding: 8px;
            }
            QPushButton:hover {
                background-color: #357ab8;
            }
            QTextEdit {
                background-color: #1e1e1e;
                border: 1px solid #555;
                border-radius: 6px;
                padding: 6px;
                color: #dcdcdc;
            }
        """)

        # Layout
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        # DICOM
        self.label_image = QLabel("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        self.label_image.setObjectName("ImageLabel")

        self.button_load = QPushButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å DICOM")
        self.button_tags = QPushButton("üîç –ü–æ–∫–∞–∑–∞—Ç—å DICOM —Ç–µ–≥–∏")
        self.button_classify = QPushButton("üß† –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
        self.button_save_dicom = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å DICOM —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        self.result_field = QTextEdit()
        self.save_button = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON")

        #self.button_save_image = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        #self.button_save_image.clicked.connect(self.save_image_result)
        #self.layout.addWidget(self.button_save_image)

        self.model_selector = QComboBox()
        self.model_selector.addItems(['VGG16_v1', 'CNN_v1'])
        self.model_selector.setCurrentText('CNN_v1')
        self.model_selector.currentTextChanged.connect(self.change_model)

        # Pack
        self.layout.addWidget(self.label_image)
        self.layout.addWidget(self.button_load)
        self.layout.addWidget(self.button_tags)
        self.layout.addWidget(self.button_classify)
        self.layout.addWidget(self.button_save_dicom)
        self.layout.addWidget(self.result_field)
        self.layout.addWidget(self.save_button)

        # Events
        self.button_load.clicked.connect(self.load_dicom)
        self.layout.insertWidget(2, QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"))
        self.layout.insertWidget(3, self.model_selector)
        self.button_tags.clicked.connect(self.show_dicom_tags)
        self.button_classify.clicked.connect(self.run_classification)
        self.button_save_dicom.clicked.connect(self.save_dicom_with_results)
        self.save_button.clicked.connect(self.save_result)

        self.button_save_report = QPushButton("üìÑ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç")
        self.button_save_report.clicked.connect(self.save_medical_report)
        self.layout.addWidget(self.button_save_report)

        self.kafka_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ kafka")
        self.kafka_button.setStyleSheet("background-color: #2e8b57; color: white; font-weight: bold; padding: 6px;")
        self.kafka_button.clicked.connect(self.send_kafka_message)
        self.layout.addWidget(self.kafka_button)

        self.dicom_array = None
        self.result = None
        self.current_dicom_path = None
        self.kafka_manager = KafkaManager()

        self.show_disclaimer()

    def show_disclaimer(self):
        msg = QMessageBox(self)
        msg.setWindowTitle("–î–∏—Å–∫–ª–µ–π–º–µ—Ä")
        msg.setIcon(QMessageBox.Warning)
        msg.setText("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()

    def generate_medical_report(self, result):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        prediction = result.get("prediction", "Unknown")
        confidence = result.get("confidence", 0)
        probabilities = result.get("probabilities", {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞
        report = f"""
        –ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –û–¢–ß–ï–¢ –û –†–ï–ó–£–õ–¨–¢–ê–¢–ê–• –ê–ù–ê–õ–ò–ó–ê
        –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {current_time}
        –ò—Å—Å–ª–µ–¥—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å: –ü–æ—á–∫–∏
        
        –†–ï–ó–£–õ–¨–¢–ê–¢–´:
        """
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if prediction == "Normal":
            report += """
        - –ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.
        """
        else:
            report += f"""
        - –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {self.get_medical_term(prediction)}
        - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {confidence*100:.1f}%
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        report += "\n–í–ï–†–û–Ø–¢–ù–û–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:\n"
        for class_name, prob in probabilities.items():
            report += f"- {self.get_medical_term(class_name)}: {prob*100:.1f}%\n"
        
        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += """
        
        –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
        """
        
        if prediction == "Normal":
            report += "–ö–¢ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–∞—Ç–æ–ª–æ–≥–∏–∏ –ø–æ—á–µ–∫ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ."
        else:
            report += f"–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ö–¢ –ø—Ä–∏–∑–Ω–∞–∫–∏: {self.get_medical_term(prediction)}."
        
        report += """
        
        –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
        - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤—Ä–∞—á–æ–º-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
        - –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ—Ñ—Ä–æ–ª–æ–≥–∞
        - –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        
        –í—Ä–∞—á-—Ä–∞–¥–∏–æ–ª–æ–≥: _________________________
        """
        
        return report.strip()

    def get_medical_term(self, class_name):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã"""
        terms = {
            "Normal": "–Ω–æ—Ä–º–∞",
            "Cyst": "–∫–∏—Å—Ç–∞",
            "Stone": "–∫–∞–º–µ–Ω—å",
            "Tumor": "–æ–ø—É—Ö–æ–ª—å"
        }
        return terms.get(class_name, class_name)

    def save_medical_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not hasattr(self, 'result') or not self.result:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = self.generate_medical_report(self.result)
        
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        path, _ = QFileDialog.getSaveFileName(
            self,
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç",
            "",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;–î–æ–∫—É–º–µ–Ω—Ç—ã Word (*.docx);;PDF —Ñ–∞–π–ª—ã (*.pdf)"
        )
        
        if not path:
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if path.endswith('.txt'):
                with open(path, 'w', encoding='utf-8') as f:
                    f.write(report)
            elif path.endswith('.docx'):
                from docx import Document
                doc = Document()
                doc.add_heading('–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç', level=1)
                for line in report.split('\n'):
                    doc.add_paragraph(line.strip())
                doc.save(path)
            elif path.endswith('.pdf'):
                from fpdf import FPDF
                pdf = FPDF()
                pdf.add_page()
                pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
                pdf.set_font('DejaVu', '', 12)
                for line in report.split('\n'):
                    pdf.cell(0, 10, line.strip(), ln=1)
                pdf.output(path)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ txt
                with open(path + '.txt', 'w', encoding='utf-8') as f:
                    f.write(report)
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")

    def run_classification(self):
        if self.dicom_array is not None:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                self.result = classify_dicom(self.dicom_array)
                
                if self.result["confidence"] == 0.0:
                    self.result_field.setText("‚ö† –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                else:
                    # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ DICOM
                    if self.current_dicom_path and self.current_dicom_path.lower().endswith('.dcm'):
                        self.save_technical_results_to_dicom()
                    
                    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç
                    report = self.generate_medical_report(self.result)
                    self.result_field.setText(report)
                    
                    # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º –æ–∫–Ω–µ
                    QMessageBox.information(
                        self, 
                        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", 
                        report,
                        QMessageBox.Ok
                    )
                    
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")



    
    def change_model(self, model_name):
        success = set_model(model_name)
        if success:
            QMessageBox.information(self, "–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞", f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model_name}")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model_name}")

    def load_dicom(self):
        path, _ = QFileDialog.getOpenFileName(
            self, 
            "–û—Ç–∫—Ä—ã—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
            "", 
            "DICOM Files (*.dcm);;JPEG Images (*.jpg *.jpeg);;PNG Images (*.png)"
        )
        if not path:
            return
        
        self.current_dicom_path = path
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if path.lower().endswith('.dcm'):
                ds = pydicom.dcmread(path)
                self.dicom_array = ds.pixel_array
                if self.dicom_array.dtype != np.uint8:
                    self.dicom_array = cv2.convertScaleAbs(
                        self.dicom_array, 
                        alpha=255.0/self.dicom_array.max()
                    )
            else:
                self.dicom_array = cv2.imread(path, cv2.IMREAD_UNCHANGED)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB
            if len(self.dicom_array.shape) == 2:
                display_image = cv2.cvtColor(self.dicom_array, cv2.COLOR_GRAY2RGB)
            else:
                display_image = self.dicom_array.copy()
                if display_image.shape[2] == 4:
                    display_image = cv2.cvtColor(display_image, cv2.COLOR_RGBA2RGB)
                else:
                    display_image = cv2.cvtColor(display_image, cv2.COLOR_BGR2RGB)
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ—á–µ–∫
            detector = KidneyDetector('C:/Phyton/–ü—Ä–æ–µ–∫—Ç/best.pt')
            detections = detector.detect(display_image)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ—á–µ–∫ (—Ç–µ–ø–µ—Ä—å –∏—â–µ–º left_kidney –∏ right_kidney)
            kidney_found = any(d['class'] in ['left_kidney', 'right_kidney', 'kidney'] for d in detections)
            
            if not kidney_found:
                reply = QMessageBox.question(
                    self,
                    "–ü–æ—á–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã",
                    "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—á–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∞–ª–∏–∑?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.No
                )
                
                if reply == QMessageBox.No:
                    self.reset_interface()
                    return
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ bounding boxes
            for det in detections:
                if det['class'] in ['left_kidney', 'right_kidney', 'kidney']:  # –î–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                    x1, y1, x2, y2 = det['bbox']
                    color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π
                    if det['class'] == 'left_kidney':
                        color = (0, 255, 255)  # –ñ–µ–ª—Ç—ã–π –¥–ª—è –ª–µ–≤–æ–π –ø–æ—á–∫–∏
                    elif det['class'] == 'right_kidney':
                        color = (255, 255, 0)  # –ì–æ–ª—É–±–æ–π –¥–ª—è –ø—Ä–∞–≤–æ–π –ø–æ—á–∫–∏
                    
                    cv2.rectangle(display_image, (x1, y1), (x2, y2), color, 2)
                    cv2.putText(display_image, 
                            f"{det['class']} {det['confidence']:.2f}", 
                            (x1, y1-10), 
                            cv2.FONT_HERSHEY_SIMPLEX, 
                            0.5, color, 1)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self.display_image(display_image)
            
        except Exception as e:
            self.show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
            self.reset_interface()

    def reset_interface(self):
        self.dicom_array = None
        self.label_image.setText("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        self.label_image.setPixmap(QPixmap())

    def display_image(self, image):
        h, w, ch = image.shape
        bytes_per_line = ch * w
        qimage = QImage(image.data, w, h, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qimage).scaled(512, 512, Qt.KeepAspectRatio)
        self.label_image.setPixmap(pixmap)
        self.label_image.setText("")

    def show_error(self, message):
        print(message)
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)

    def show_dicom_tags(self):
        if not self.current_dicom_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DICOM —Ñ–∞–π–ª.")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø–∞–º—è—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if hasattr(self, 'result') and self.result:
            tags = {
                **get_dicom_tags(self.current_dicom_path),
                "prediction": str(self.result.get("prediction", "")),
                "confidence": str(self.result.get("confidence", "")),
                "probabilities": str(self.result.get("probabilities", ""))
            }
        else:
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            tags = get_dicom_tags(self.current_dicom_path)
        
        self.result_field.setText(json.dumps(tags, indent=4, ensure_ascii=False))

    def run_classification(self):
        if self.dicom_array is not None:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
                self.result = classify_dicom(self.dicom_array)
                
                if self.result["confidence"] == 0.0:
                    self.result_field.setText("‚ö† –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª (–µ—Å–ª–∏ —ç—Ç–æ DICOM)
                    if self.current_dicom_path and self.current_dicom_path.lower().endswith('.dcm'):
                        add_classification_result_to_dicom(
                            self.current_dicom_path, 
                            self.result,
                            self.current_dicom_path  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
                        )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    self.result_field.setText(json.dumps(self.result, indent=4, ensure_ascii=False))
                    
            except Exception as e:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
                print(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

    def save_dicom_with_results(self):
        if self.current_dicom_path and self.result:
            output_path, _ = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å DICOM —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏", 
                "", 
                "DICOM Files (*.dcm)"
            ) 
            
            if output_path:
                saved_path = add_classification_result_to_dicom(
                    self.current_dicom_path, 
                    self.result, 
                    output_path
                )
                
                if saved_path:
                    QMessageBox.information(
                        self, 
                        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 
                        f"DICOM —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{saved_path}"
                    )
                else:
                    QMessageBox.critical(
                        self, 
                        "–û—à–∏–±–∫–∞", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å DICOM —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
                    )
        else:
            QMessageBox.warning(
                self, 
                "–û—à–∏–±–∫–∞", 
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DICOM —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"
            )

    def send_kafka_message(self):
        if not self.current_dicom_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ DICOM —Ñ–∞–π–ª")
            return
            
        if not self.result:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Kafka
        if not self.kafka_manager.check_connection():
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka —Å–µ—Ä–≤–µ—Ä—É")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ "–∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è"
        metadata = get_dicom_tags(self.current_dicom_path)
        metadata.update({
            'analysis_result': self.result,
            'model_info': get_current_model_info()
        })
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        for field in ['prediction', 'confidence', 'probabilities']:
            metadata.pop(field, None)  # –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            
        message = {'metadata': metadata}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        success, msg = self.kafka_manager.send_message(message, "AnalysisResults")
        if not success:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON: {msg}")
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ DICOM —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–∞–º —Ñ–∞–π–ª
        if self.current_dicom_path.lower().endswith('.dcm'):
            success, msg = self.kafka_manager.send_dicom_file(
                self.current_dicom_path,
                message['metadata'],
                "DICOMFiles"
            )
            
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "DICOM —Ñ–∞–π–ª –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            else:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DICOM —Ñ–∞–π–ª: {msg}")
        else:
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    def save_result(self):
        if self.result:
            path, _ = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON", 
                "classification_result.json", 
                "JSON (*.json)"
            )
            if path:
                with open(path, 'w', encoding='utf-8') as f:
                    json.dump(self.result, f, indent=4, ensure_ascii=False)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = KidneyApp()
    window.show()
    sys.exit(app.exec_())